// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aggregates

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregateRootsClient is the client API for AggregateRoots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregateRootsClient interface {
	Register(ctx context.Context, in *AggregateRootRegistrationRequest, opts ...grpc.CallOption) (*AggregateRootRegistrationResponse, error)
}

type aggregateRootsClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregateRootsClient(cc grpc.ClientConnInterface) AggregateRootsClient {
	return &aggregateRootsClient{cc}
}

func (c *aggregateRootsClient) Register(ctx context.Context, in *AggregateRootRegistrationRequest, opts ...grpc.CallOption) (*AggregateRootRegistrationResponse, error) {
	out := new(AggregateRootRegistrationResponse)
	err := c.cc.Invoke(ctx, "/dolittle.runtime.aggregates.AggregateRoots/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregateRootsServer is the server API for AggregateRoots service.
// All implementations must embed UnimplementedAggregateRootsServer
// for forward compatibility
type AggregateRootsServer interface {
	Register(context.Context, *AggregateRootRegistrationRequest) (*AggregateRootRegistrationResponse, error)
	mustEmbedUnimplementedAggregateRootsServer()
}

// UnimplementedAggregateRootsServer must be embedded to have forward compatible implementations.
type UnimplementedAggregateRootsServer struct {
}

func (UnimplementedAggregateRootsServer) Register(context.Context, *AggregateRootRegistrationRequest) (*AggregateRootRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAggregateRootsServer) mustEmbedUnimplementedAggregateRootsServer() {}

// UnsafeAggregateRootsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregateRootsServer will
// result in compilation errors.
type UnsafeAggregateRootsServer interface {
	mustEmbedUnimplementedAggregateRootsServer()
}

func RegisterAggregateRootsServer(s grpc.ServiceRegistrar, srv AggregateRootsServer) {
	s.RegisterService(&AggregateRoots_ServiceDesc, srv)
}

func _AggregateRoots_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRootRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregateRootsServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolittle.runtime.aggregates.AggregateRoots/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregateRootsServer).Register(ctx, req.(*AggregateRootRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregateRoots_ServiceDesc is the grpc.ServiceDesc for AggregateRoots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregateRoots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dolittle.runtime.aggregates.AggregateRoots",
	HandlerType: (*AggregateRootsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AggregateRoots_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Runtime/Aggregates/AggregateRoots.proto",
}
