// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: Runtime/Events.Processing/Filters.proto

package processing

import (
	protobuf "go.dolittle.io/contracts/v6/protobuf"
	events "go.dolittle.io/contracts/v6/runtime/events"
	services "go.dolittle.io/contracts/v6/services"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *protobuf.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *FilterRegistrationResponse) Reset() {
	*x = FilterRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRegistrationResponse) ProtoMessage() {}

func (x *FilterRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRegistrationResponse.ProtoReflect.Descriptor instead.
func (*FilterRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Filters_proto_rawDescGZIP(), []int{0}
}

func (x *FilterRegistrationResponse) GetFailure() *protobuf.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type FilterEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext          *services.ReverseCallRequestContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	Event                *events.CommittedEvent              `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	ScopeId              *protobuf.Uuid                      `protobuf:"bytes,3,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	RetryProcessingState *RetryProcessingState               `protobuf:"bytes,4,opt,name=retryProcessingState,proto3" json:"retryProcessingState,omitempty"`
}

func (x *FilterEventRequest) Reset() {
	*x = FilterEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterEventRequest) ProtoMessage() {}

func (x *FilterEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterEventRequest.ProtoReflect.Descriptor instead.
func (*FilterEventRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Filters_proto_rawDescGZIP(), []int{1}
}

func (x *FilterEventRequest) GetCallContext() *services.ReverseCallRequestContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *FilterEventRequest) GetEvent() *events.CommittedEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *FilterEventRequest) GetScopeId() *protobuf.Uuid {
	if x != nil {
		return x.ScopeId
	}
	return nil
}

func (x *FilterEventRequest) GetRetryProcessingState() *RetryProcessingState {
	if x != nil {
		return x.RetryProcessingState
	}
	return nil
}

type FilterRuntimeToClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*FilterRuntimeToClientMessage_RegistrationResponse
	//	*FilterRuntimeToClientMessage_FilterRequest
	//	*FilterRuntimeToClientMessage_Ping
	Message isFilterRuntimeToClientMessage_Message `protobuf_oneof:"Message"`
}

func (x *FilterRuntimeToClientMessage) Reset() {
	*x = FilterRuntimeToClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRuntimeToClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRuntimeToClientMessage) ProtoMessage() {}

func (x *FilterRuntimeToClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRuntimeToClientMessage.ProtoReflect.Descriptor instead.
func (*FilterRuntimeToClientMessage) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Filters_proto_rawDescGZIP(), []int{2}
}

func (m *FilterRuntimeToClientMessage) GetMessage() isFilterRuntimeToClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *FilterRuntimeToClientMessage) GetRegistrationResponse() *FilterRegistrationResponse {
	if x, ok := x.GetMessage().(*FilterRuntimeToClientMessage_RegistrationResponse); ok {
		return x.RegistrationResponse
	}
	return nil
}

func (x *FilterRuntimeToClientMessage) GetFilterRequest() *FilterEventRequest {
	if x, ok := x.GetMessage().(*FilterRuntimeToClientMessage_FilterRequest); ok {
		return x.FilterRequest
	}
	return nil
}

func (x *FilterRuntimeToClientMessage) GetPing() *services.Ping {
	if x, ok := x.GetMessage().(*FilterRuntimeToClientMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

type isFilterRuntimeToClientMessage_Message interface {
	isFilterRuntimeToClientMessage_Message()
}

type FilterRuntimeToClientMessage_RegistrationResponse struct {
	RegistrationResponse *FilterRegistrationResponse `protobuf:"bytes,1,opt,name=registrationResponse,proto3,oneof"`
}

type FilterRuntimeToClientMessage_FilterRequest struct {
	FilterRequest *FilterEventRequest `protobuf:"bytes,2,opt,name=filterRequest,proto3,oneof"`
}

type FilterRuntimeToClientMessage_Ping struct {
	Ping *services.Ping `protobuf:"bytes,3,opt,name=ping,proto3,oneof"`
}

func (*FilterRuntimeToClientMessage_RegistrationResponse) isFilterRuntimeToClientMessage_Message() {}

func (*FilterRuntimeToClientMessage_FilterRequest) isFilterRuntimeToClientMessage_Message() {}

func (*FilterRuntimeToClientMessage_Ping) isFilterRuntimeToClientMessage_Message() {}

type FilterRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext *services.ReverseCallArgumentsContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	ScopeId     *protobuf.Uuid                        `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	FilterId    *protobuf.Uuid                        `protobuf:"bytes,3,opt,name=filterId,proto3" json:"filterId,omitempty"`
}

func (x *FilterRegistrationRequest) Reset() {
	*x = FilterRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRegistrationRequest) ProtoMessage() {}

func (x *FilterRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRegistrationRequest.ProtoReflect.Descriptor instead.
func (*FilterRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Filters_proto_rawDescGZIP(), []int{3}
}

func (x *FilterRegistrationRequest) GetCallContext() *services.ReverseCallArgumentsContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *FilterRegistrationRequest) GetScopeId() *protobuf.Uuid {
	if x != nil {
		return x.ScopeId
	}
	return nil
}

func (x *FilterRegistrationRequest) GetFilterId() *protobuf.Uuid {
	if x != nil {
		return x.FilterId
	}
	return nil
}

type FilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext *services.ReverseCallResponseContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	IsIncluded  bool                                 `protobuf:"varint,2,opt,name=isIncluded,proto3" json:"isIncluded,omitempty"`
	Failure     *ProcessorFailure                    `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *FilterResponse) Reset() {
	*x = FilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterResponse) ProtoMessage() {}

func (x *FilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterResponse.ProtoReflect.Descriptor instead.
func (*FilterResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Filters_proto_rawDescGZIP(), []int{4}
}

func (x *FilterResponse) GetCallContext() *services.ReverseCallResponseContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *FilterResponse) GetIsIncluded() bool {
	if x != nil {
		return x.IsIncluded
	}
	return false
}

func (x *FilterResponse) GetFailure() *ProcessorFailure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type FilterClientToRuntimeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*FilterClientToRuntimeMessage_RegistrationRequest
	//	*FilterClientToRuntimeMessage_FilterResult
	//	*FilterClientToRuntimeMessage_Pong
	Message isFilterClientToRuntimeMessage_Message `protobuf_oneof:"Message"`
}

func (x *FilterClientToRuntimeMessage) Reset() {
	*x = FilterClientToRuntimeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterClientToRuntimeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterClientToRuntimeMessage) ProtoMessage() {}

func (x *FilterClientToRuntimeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Filters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterClientToRuntimeMessage.ProtoReflect.Descriptor instead.
func (*FilterClientToRuntimeMessage) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Filters_proto_rawDescGZIP(), []int{5}
}

func (m *FilterClientToRuntimeMessage) GetMessage() isFilterClientToRuntimeMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *FilterClientToRuntimeMessage) GetRegistrationRequest() *FilterRegistrationRequest {
	if x, ok := x.GetMessage().(*FilterClientToRuntimeMessage_RegistrationRequest); ok {
		return x.RegistrationRequest
	}
	return nil
}

func (x *FilterClientToRuntimeMessage) GetFilterResult() *FilterResponse {
	if x, ok := x.GetMessage().(*FilterClientToRuntimeMessage_FilterResult); ok {
		return x.FilterResult
	}
	return nil
}

func (x *FilterClientToRuntimeMessage) GetPong() *services.Pong {
	if x, ok := x.GetMessage().(*FilterClientToRuntimeMessage_Pong); ok {
		return x.Pong
	}
	return nil
}

type isFilterClientToRuntimeMessage_Message interface {
	isFilterClientToRuntimeMessage_Message()
}

type FilterClientToRuntimeMessage_RegistrationRequest struct {
	RegistrationRequest *FilterRegistrationRequest `protobuf:"bytes,1,opt,name=registrationRequest,proto3,oneof"`
}

type FilterClientToRuntimeMessage_FilterResult struct {
	FilterResult *FilterResponse `protobuf:"bytes,2,opt,name=filterResult,proto3,oneof"`
}

type FilterClientToRuntimeMessage_Pong struct {
	Pong *services.Pong `protobuf:"bytes,3,opt,name=pong,proto3,oneof"`
}

func (*FilterClientToRuntimeMessage_RegistrationRequest) isFilterClientToRuntimeMessage_Message() {}

func (*FilterClientToRuntimeMessage_FilterResult) isFilterClientToRuntimeMessage_Message() {}

func (*FilterClientToRuntimeMessage_Pong) isFilterClientToRuntimeMessage_Message() {}

var File_Runtime_Events_Processing_Filters_proto protoreflect.FileDescriptor

var file_Runtime_Events_Processing_Filters_proto_rawDesc = []byte{
	0x0a, 0x27, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x64, 0x6f, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x1a, 0x23, 0x46,
	0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73,
	0x2f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x55, 0x75, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x73, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x73, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x50, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x32, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x12, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x3d, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x6c, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xae, 0x02, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x74, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x07, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x0e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x4e, 0x0a,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xa5, 0x02,
	0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x71,
	0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x6f,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xe7, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x40, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x40, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0xa7, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x4b, 0x2e, 0x64,
	0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x40, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x9d, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x46, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x40, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x66, 0x5a, 0x35, 0x67, 0x6f, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69,
	0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x36, 0x2f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0xaa, 0x02, 0x2c, 0x44, 0x6f, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Runtime_Events_Processing_Filters_proto_rawDescOnce sync.Once
	file_Runtime_Events_Processing_Filters_proto_rawDescData = file_Runtime_Events_Processing_Filters_proto_rawDesc
)

func file_Runtime_Events_Processing_Filters_proto_rawDescGZIP() []byte {
	file_Runtime_Events_Processing_Filters_proto_rawDescOnce.Do(func() {
		file_Runtime_Events_Processing_Filters_proto_rawDescData = protoimpl.X.CompressGZIP(file_Runtime_Events_Processing_Filters_proto_rawDescData)
	})
	return file_Runtime_Events_Processing_Filters_proto_rawDescData
}

var file_Runtime_Events_Processing_Filters_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_Runtime_Events_Processing_Filters_proto_goTypes = []interface{}{
	(*FilterRegistrationResponse)(nil),              // 0: dolittle.runtime.events.processing.FilterRegistrationResponse
	(*FilterEventRequest)(nil),                      // 1: dolittle.runtime.events.processing.FilterEventRequest
	(*FilterRuntimeToClientMessage)(nil),            // 2: dolittle.runtime.events.processing.FilterRuntimeToClientMessage
	(*FilterRegistrationRequest)(nil),               // 3: dolittle.runtime.events.processing.FilterRegistrationRequest
	(*FilterResponse)(nil),                          // 4: dolittle.runtime.events.processing.FilterResponse
	(*FilterClientToRuntimeMessage)(nil),            // 5: dolittle.runtime.events.processing.FilterClientToRuntimeMessage
	(*protobuf.Failure)(nil),                        // 6: dolittle.protobuf.Failure
	(*services.ReverseCallRequestContext)(nil),      // 7: dolittle.services.ReverseCallRequestContext
	(*events.CommittedEvent)(nil),                   // 8: dolittle.runtime.events.CommittedEvent
	(*protobuf.Uuid)(nil),                           // 9: dolittle.protobuf.Uuid
	(*RetryProcessingState)(nil),                    // 10: dolittle.runtime.events.processing.RetryProcessingState
	(*services.Ping)(nil),                           // 11: dolittle.services.Ping
	(*services.ReverseCallArgumentsContext)(nil),    // 12: dolittle.services.ReverseCallArgumentsContext
	(*services.ReverseCallResponseContext)(nil),     // 13: dolittle.services.ReverseCallResponseContext
	(*ProcessorFailure)(nil),                        // 14: dolittle.runtime.events.processing.ProcessorFailure
	(*services.Pong)(nil),                           // 15: dolittle.services.Pong
	(*PartitionedFilterClientToRuntimeMessage)(nil), // 16: dolittle.runtime.events.processing.PartitionedFilterClientToRuntimeMessage
	(*PublicFilterClientToRuntimeMessage)(nil),      // 17: dolittle.runtime.events.processing.PublicFilterClientToRuntimeMessage
}
var file_Runtime_Events_Processing_Filters_proto_depIdxs = []int32{
	6,  // 0: dolittle.runtime.events.processing.FilterRegistrationResponse.failure:type_name -> dolittle.protobuf.Failure
	7,  // 1: dolittle.runtime.events.processing.FilterEventRequest.callContext:type_name -> dolittle.services.ReverseCallRequestContext
	8,  // 2: dolittle.runtime.events.processing.FilterEventRequest.event:type_name -> dolittle.runtime.events.CommittedEvent
	9,  // 3: dolittle.runtime.events.processing.FilterEventRequest.scopeId:type_name -> dolittle.protobuf.Uuid
	10, // 4: dolittle.runtime.events.processing.FilterEventRequest.retryProcessingState:type_name -> dolittle.runtime.events.processing.RetryProcessingState
	0,  // 5: dolittle.runtime.events.processing.FilterRuntimeToClientMessage.registrationResponse:type_name -> dolittle.runtime.events.processing.FilterRegistrationResponse
	1,  // 6: dolittle.runtime.events.processing.FilterRuntimeToClientMessage.filterRequest:type_name -> dolittle.runtime.events.processing.FilterEventRequest
	11, // 7: dolittle.runtime.events.processing.FilterRuntimeToClientMessage.ping:type_name -> dolittle.services.Ping
	12, // 8: dolittle.runtime.events.processing.FilterRegistrationRequest.callContext:type_name -> dolittle.services.ReverseCallArgumentsContext
	9,  // 9: dolittle.runtime.events.processing.FilterRegistrationRequest.scopeId:type_name -> dolittle.protobuf.Uuid
	9,  // 10: dolittle.runtime.events.processing.FilterRegistrationRequest.filterId:type_name -> dolittle.protobuf.Uuid
	13, // 11: dolittle.runtime.events.processing.FilterResponse.callContext:type_name -> dolittle.services.ReverseCallResponseContext
	14, // 12: dolittle.runtime.events.processing.FilterResponse.failure:type_name -> dolittle.runtime.events.processing.ProcessorFailure
	3,  // 13: dolittle.runtime.events.processing.FilterClientToRuntimeMessage.registrationRequest:type_name -> dolittle.runtime.events.processing.FilterRegistrationRequest
	4,  // 14: dolittle.runtime.events.processing.FilterClientToRuntimeMessage.filterResult:type_name -> dolittle.runtime.events.processing.FilterResponse
	15, // 15: dolittle.runtime.events.processing.FilterClientToRuntimeMessage.pong:type_name -> dolittle.services.Pong
	5,  // 16: dolittle.runtime.events.processing.Filters.Connect:input_type -> dolittle.runtime.events.processing.FilterClientToRuntimeMessage
	16, // 17: dolittle.runtime.events.processing.Filters.ConnectPartitioned:input_type -> dolittle.runtime.events.processing.PartitionedFilterClientToRuntimeMessage
	17, // 18: dolittle.runtime.events.processing.Filters.ConnectPublic:input_type -> dolittle.runtime.events.processing.PublicFilterClientToRuntimeMessage
	2,  // 19: dolittle.runtime.events.processing.Filters.Connect:output_type -> dolittle.runtime.events.processing.FilterRuntimeToClientMessage
	2,  // 20: dolittle.runtime.events.processing.Filters.ConnectPartitioned:output_type -> dolittle.runtime.events.processing.FilterRuntimeToClientMessage
	2,  // 21: dolittle.runtime.events.processing.Filters.ConnectPublic:output_type -> dolittle.runtime.events.processing.FilterRuntimeToClientMessage
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_Runtime_Events_Processing_Filters_proto_init() }
func file_Runtime_Events_Processing_Filters_proto_init() {
	if File_Runtime_Events_Processing_Filters_proto != nil {
		return
	}
	file_Runtime_Events_Processing_Processors_proto_init()
	file_Runtime_Events_Processing_PartitionedFilters_proto_init()
	file_Runtime_Events_Processing_PublicFilters_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Runtime_Events_Processing_Filters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Filters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Filters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRuntimeToClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Filters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Filters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Filters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterClientToRuntimeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Runtime_Events_Processing_Filters_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FilterRuntimeToClientMessage_RegistrationResponse)(nil),
		(*FilterRuntimeToClientMessage_FilterRequest)(nil),
		(*FilterRuntimeToClientMessage_Ping)(nil),
	}
	file_Runtime_Events_Processing_Filters_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FilterClientToRuntimeMessage_RegistrationRequest)(nil),
		(*FilterClientToRuntimeMessage_FilterResult)(nil),
		(*FilterClientToRuntimeMessage_Pong)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Runtime_Events_Processing_Filters_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Runtime_Events_Processing_Filters_proto_goTypes,
		DependencyIndexes: file_Runtime_Events_Processing_Filters_proto_depIdxs,
		MessageInfos:      file_Runtime_Events_Processing_Filters_proto_msgTypes,
	}.Build()
	File_Runtime_Events_Processing_Filters_proto = out.File
	file_Runtime_Events_Processing_Filters_proto_rawDesc = nil
	file_Runtime_Events_Processing_Filters_proto_goTypes = nil
	file_Runtime_Events_Processing_Filters_proto_depIdxs = nil
}
