// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: Runtime/Events.Processing/Processors.proto

package processing

import (
	protobuf "go.dolittle.io/contracts/v5/protobuf"
	services "go.dolittle.io/contracts/v5/services"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcessorFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason       string               `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Retry        bool                 `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
	RetryTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=retryTimeout,proto3" json:"retryTimeout,omitempty"`
}

func (x *ProcessorFailure) Reset() {
	*x = ProcessorFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorFailure) ProtoMessage() {}

func (x *ProcessorFailure) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorFailure.ProtoReflect.Descriptor instead.
func (*ProcessorFailure) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Processors_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessorFailure) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ProcessorFailure) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

func (x *ProcessorFailure) GetRetryTimeout() *durationpb.Duration {
	if x != nil {
		return x.RetryTimeout
	}
	return nil
}

type RetryProcessingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureReason string `protobuf:"bytes,1,opt,name=failureReason,proto3" json:"failureReason,omitempty"`
	RetryCount    uint32 `protobuf:"varint,2,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
}

func (x *RetryProcessingState) Reset() {
	*x = RetryProcessingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryProcessingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryProcessingState) ProtoMessage() {}

func (x *RetryProcessingState) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryProcessingState.ProtoReflect.Descriptor instead.
func (*RetryProcessingState) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Processors_proto_rawDescGZIP(), []int{1}
}

func (x *RetryProcessingState) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *RetryProcessingState) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

type ProcessorRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext    *services.ReverseCallArgumentsContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	ScopeId        *protobuf.Uuid                        `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	ProcessorId    *protobuf.Uuid                        `protobuf:"bytes,3,opt,name=processorId,proto3" json:"processorId,omitempty"`
	SourceStreamId *protobuf.Uuid                        `protobuf:"bytes,4,opt,name=sourceStreamId,proto3" json:"sourceStreamId,omitempty"`
}

func (x *ProcessorRegistrationRequest) Reset() {
	*x = ProcessorRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorRegistrationRequest) ProtoMessage() {}

func (x *ProcessorRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorRegistrationRequest.ProtoReflect.Descriptor instead.
func (*ProcessorRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Processors_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessorRegistrationRequest) GetCallContext() *services.ReverseCallArgumentsContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *ProcessorRegistrationRequest) GetScopeId() *protobuf.Uuid {
	if x != nil {
		return x.ScopeId
	}
	return nil
}

func (x *ProcessorRegistrationRequest) GetProcessorId() *protobuf.Uuid {
	if x != nil {
		return x.ProcessorId
	}
	return nil
}

func (x *ProcessorRegistrationRequest) GetSourceStreamId() *protobuf.Uuid {
	if x != nil {
		return x.SourceStreamId
	}
	return nil
}

type ProcessorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext *services.ReverseCallResponseContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	Failure     *ProcessorFailure                    `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"` // If not set/empty - no failure
}

func (x *ProcessorResponse) Reset() {
	*x = ProcessorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorResponse) ProtoMessage() {}

func (x *ProcessorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorResponse.ProtoReflect.Descriptor instead.
func (*ProcessorResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Processors_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessorResponse) GetCallContext() *services.ReverseCallResponseContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *ProcessorResponse) GetFailure() *ProcessorFailure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type ProcessorClientToRuntimeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*ProcessorClientToRuntimeMessage_RegistrationRequest
	//	*ProcessorClientToRuntimeMessage_ProcessingResult
	//	*ProcessorClientToRuntimeMessage_Pong
	Message isProcessorClientToRuntimeMessage_Message `protobuf_oneof:"Message"`
}

func (x *ProcessorClientToRuntimeMessage) Reset() {
	*x = ProcessorClientToRuntimeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorClientToRuntimeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorClientToRuntimeMessage) ProtoMessage() {}

func (x *ProcessorClientToRuntimeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorClientToRuntimeMessage.ProtoReflect.Descriptor instead.
func (*ProcessorClientToRuntimeMessage) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Processors_proto_rawDescGZIP(), []int{4}
}

func (m *ProcessorClientToRuntimeMessage) GetMessage() isProcessorClientToRuntimeMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ProcessorClientToRuntimeMessage) GetRegistrationRequest() *ProcessorRegistrationRequest {
	if x, ok := x.GetMessage().(*ProcessorClientToRuntimeMessage_RegistrationRequest); ok {
		return x.RegistrationRequest
	}
	return nil
}

func (x *ProcessorClientToRuntimeMessage) GetProcessingResult() *ProcessorResponse {
	if x, ok := x.GetMessage().(*ProcessorClientToRuntimeMessage_ProcessingResult); ok {
		return x.ProcessingResult
	}
	return nil
}

func (x *ProcessorClientToRuntimeMessage) GetPong() *services.Pong {
	if x, ok := x.GetMessage().(*ProcessorClientToRuntimeMessage_Pong); ok {
		return x.Pong
	}
	return nil
}

type isProcessorClientToRuntimeMessage_Message interface {
	isProcessorClientToRuntimeMessage_Message()
}

type ProcessorClientToRuntimeMessage_RegistrationRequest struct {
	RegistrationRequest *ProcessorRegistrationRequest `protobuf:"bytes,1,opt,name=registrationRequest,proto3,oneof"`
}

type ProcessorClientToRuntimeMessage_ProcessingResult struct {
	ProcessingResult *ProcessorResponse `protobuf:"bytes,2,opt,name=processingResult,proto3,oneof"`
}

type ProcessorClientToRuntimeMessage_Pong struct {
	Pong *services.Pong `protobuf:"bytes,3,opt,name=pong,proto3,oneof"`
}

func (*ProcessorClientToRuntimeMessage_RegistrationRequest) isProcessorClientToRuntimeMessage_Message() {
}

func (*ProcessorClientToRuntimeMessage_ProcessingResult) isProcessorClientToRuntimeMessage_Message() {
}

func (*ProcessorClientToRuntimeMessage_Pong) isProcessorClientToRuntimeMessage_Message() {}

type ProcessorRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *protobuf.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *ProcessorRegistrationResponse) Reset() {
	*x = ProcessorRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorRegistrationResponse) ProtoMessage() {}

func (x *ProcessorRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorRegistrationResponse.ProtoReflect.Descriptor instead.
func (*ProcessorRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Processors_proto_rawDescGZIP(), []int{5}
}

func (x *ProcessorRegistrationResponse) GetFailure() *protobuf.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type ProcessEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext          *services.ReverseCallRequestContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	Event                *StreamEvent                        `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	RetryProcessingState *RetryProcessingState               `protobuf:"bytes,3,opt,name=retryProcessingState,proto3" json:"retryProcessingState,omitempty"`
}

func (x *ProcessEventRequest) Reset() {
	*x = ProcessEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventRequest) ProtoMessage() {}

func (x *ProcessEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventRequest.ProtoReflect.Descriptor instead.
func (*ProcessEventRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Processors_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessEventRequest) GetCallContext() *services.ReverseCallRequestContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *ProcessEventRequest) GetEvent() *StreamEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ProcessEventRequest) GetRetryProcessingState() *RetryProcessingState {
	if x != nil {
		return x.RetryProcessingState
	}
	return nil
}

type ProcessorRuntimeToClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*ProcessorRuntimeToClientMessage_RegistrationResponse
	//	*ProcessorRuntimeToClientMessage_HandleRequest
	//	*ProcessorRuntimeToClientMessage_Ping
	Message isProcessorRuntimeToClientMessage_Message `protobuf_oneof:"Message"`
}

func (x *ProcessorRuntimeToClientMessage) Reset() {
	*x = ProcessorRuntimeToClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorRuntimeToClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorRuntimeToClientMessage) ProtoMessage() {}

func (x *ProcessorRuntimeToClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Processors_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorRuntimeToClientMessage.ProtoReflect.Descriptor instead.
func (*ProcessorRuntimeToClientMessage) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Processors_proto_rawDescGZIP(), []int{7}
}

func (m *ProcessorRuntimeToClientMessage) GetMessage() isProcessorRuntimeToClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ProcessorRuntimeToClientMessage) GetRegistrationResponse() *ProcessorRegistrationResponse {
	if x, ok := x.GetMessage().(*ProcessorRuntimeToClientMessage_RegistrationResponse); ok {
		return x.RegistrationResponse
	}
	return nil
}

func (x *ProcessorRuntimeToClientMessage) GetHandleRequest() *ProcessEventRequest {
	if x, ok := x.GetMessage().(*ProcessorRuntimeToClientMessage_HandleRequest); ok {
		return x.HandleRequest
	}
	return nil
}

func (x *ProcessorRuntimeToClientMessage) GetPing() *services.Ping {
	if x, ok := x.GetMessage().(*ProcessorRuntimeToClientMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

type isProcessorRuntimeToClientMessage_Message interface {
	isProcessorRuntimeToClientMessage_Message()
}

type ProcessorRuntimeToClientMessage_RegistrationResponse struct {
	RegistrationResponse *ProcessorRegistrationResponse `protobuf:"bytes,1,opt,name=registrationResponse,proto3,oneof"`
}

type ProcessorRuntimeToClientMessage_HandleRequest struct {
	HandleRequest *ProcessEventRequest `protobuf:"bytes,2,opt,name=handleRequest,proto3,oneof"`
}

type ProcessorRuntimeToClientMessage_Ping struct {
	Ping *services.Ping `protobuf:"bytes,3,opt,name=ping,proto3,oneof"`
}

func (*ProcessorRuntimeToClientMessage_RegistrationResponse) isProcessorRuntimeToClientMessage_Message() {
}

func (*ProcessorRuntimeToClientMessage_HandleRequest) isProcessorRuntimeToClientMessage_Message() {}

func (*ProcessorRuntimeToClientMessage_Ping) isProcessorRuntimeToClientMessage_Message() {}

var File_Runtime_Events_Processing_Processors_proto protoreflect.FileDescriptor

var file_Runtime_Events_Processing_Processors_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x1a, 0x23, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x73, 0x2f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x55, 0x75, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x50,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x5c, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e,
	0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xb6,
	0x02, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x74, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0x9a,
	0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a,
	0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x1f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x77, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0xa6, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x43,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x43, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x66, 0x5a, 0x35,
	0x67, 0x6f, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x35, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0xaa, 0x02, 0x2c, 0x44, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Runtime_Events_Processing_Processors_proto_rawDescOnce sync.Once
	file_Runtime_Events_Processing_Processors_proto_rawDescData = file_Runtime_Events_Processing_Processors_proto_rawDesc
)

func file_Runtime_Events_Processing_Processors_proto_rawDescGZIP() []byte {
	file_Runtime_Events_Processing_Processors_proto_rawDescOnce.Do(func() {
		file_Runtime_Events_Processing_Processors_proto_rawDescData = protoimpl.X.CompressGZIP(file_Runtime_Events_Processing_Processors_proto_rawDescData)
	})
	return file_Runtime_Events_Processing_Processors_proto_rawDescData
}

var file_Runtime_Events_Processing_Processors_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_Runtime_Events_Processing_Processors_proto_goTypes = []interface{}{
	(*ProcessorFailure)(nil),                     // 0: dolittle.runtime.events.processing.ProcessorFailure
	(*RetryProcessingState)(nil),                 // 1: dolittle.runtime.events.processing.RetryProcessingState
	(*ProcessorRegistrationRequest)(nil),         // 2: dolittle.runtime.events.processing.ProcessorRegistrationRequest
	(*ProcessorResponse)(nil),                    // 3: dolittle.runtime.events.processing.ProcessorResponse
	(*ProcessorClientToRuntimeMessage)(nil),      // 4: dolittle.runtime.events.processing.ProcessorClientToRuntimeMessage
	(*ProcessorRegistrationResponse)(nil),        // 5: dolittle.runtime.events.processing.ProcessorRegistrationResponse
	(*ProcessEventRequest)(nil),                  // 6: dolittle.runtime.events.processing.ProcessEventRequest
	(*ProcessorRuntimeToClientMessage)(nil),      // 7: dolittle.runtime.events.processing.ProcessorRuntimeToClientMessage
	(*durationpb.Duration)(nil),                  // 8: google.protobuf.Duration
	(*services.ReverseCallArgumentsContext)(nil), // 9: dolittle.services.ReverseCallArgumentsContext
	(*protobuf.Uuid)(nil),                        // 10: dolittle.protobuf.Uuid
	(*services.ReverseCallResponseContext)(nil),  // 11: dolittle.services.ReverseCallResponseContext
	(*services.Pong)(nil),                        // 12: dolittle.services.Pong
	(*protobuf.Failure)(nil),                     // 13: dolittle.protobuf.Failure
	(*services.ReverseCallRequestContext)(nil),   // 14: dolittle.services.ReverseCallRequestContext
	(*StreamEvent)(nil),                          // 15: dolittle.runtime.events.processing.StreamEvent
	(*services.Ping)(nil),                        // 16: dolittle.services.Ping
}
var file_Runtime_Events_Processing_Processors_proto_depIdxs = []int32{
	8,  // 0: dolittle.runtime.events.processing.ProcessorFailure.retryTimeout:type_name -> google.protobuf.Duration
	9,  // 1: dolittle.runtime.events.processing.ProcessorRegistrationRequest.callContext:type_name -> dolittle.services.ReverseCallArgumentsContext
	10, // 2: dolittle.runtime.events.processing.ProcessorRegistrationRequest.scopeId:type_name -> dolittle.protobuf.Uuid
	10, // 3: dolittle.runtime.events.processing.ProcessorRegistrationRequest.processorId:type_name -> dolittle.protobuf.Uuid
	10, // 4: dolittle.runtime.events.processing.ProcessorRegistrationRequest.sourceStreamId:type_name -> dolittle.protobuf.Uuid
	11, // 5: dolittle.runtime.events.processing.ProcessorResponse.callContext:type_name -> dolittle.services.ReverseCallResponseContext
	0,  // 6: dolittle.runtime.events.processing.ProcessorResponse.failure:type_name -> dolittle.runtime.events.processing.ProcessorFailure
	2,  // 7: dolittle.runtime.events.processing.ProcessorClientToRuntimeMessage.registrationRequest:type_name -> dolittle.runtime.events.processing.ProcessorRegistrationRequest
	3,  // 8: dolittle.runtime.events.processing.ProcessorClientToRuntimeMessage.processingResult:type_name -> dolittle.runtime.events.processing.ProcessorResponse
	12, // 9: dolittle.runtime.events.processing.ProcessorClientToRuntimeMessage.pong:type_name -> dolittle.services.Pong
	13, // 10: dolittle.runtime.events.processing.ProcessorRegistrationResponse.failure:type_name -> dolittle.protobuf.Failure
	14, // 11: dolittle.runtime.events.processing.ProcessEventRequest.callContext:type_name -> dolittle.services.ReverseCallRequestContext
	15, // 12: dolittle.runtime.events.processing.ProcessEventRequest.event:type_name -> dolittle.runtime.events.processing.StreamEvent
	1,  // 13: dolittle.runtime.events.processing.ProcessEventRequest.retryProcessingState:type_name -> dolittle.runtime.events.processing.RetryProcessingState
	5,  // 14: dolittle.runtime.events.processing.ProcessorRuntimeToClientMessage.registrationResponse:type_name -> dolittle.runtime.events.processing.ProcessorRegistrationResponse
	6,  // 15: dolittle.runtime.events.processing.ProcessorRuntimeToClientMessage.handleRequest:type_name -> dolittle.runtime.events.processing.ProcessEventRequest
	16, // 16: dolittle.runtime.events.processing.ProcessorRuntimeToClientMessage.ping:type_name -> dolittle.services.Ping
	4,  // 17: dolittle.runtime.events.processing.Processors.Connect:input_type -> dolittle.runtime.events.processing.ProcessorClientToRuntimeMessage
	7,  // 18: dolittle.runtime.events.processing.Processors.Connect:output_type -> dolittle.runtime.events.processing.ProcessorRuntimeToClientMessage
	18, // [18:19] is the sub-list for method output_type
	17, // [17:18] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_Runtime_Events_Processing_Processors_proto_init() }
func file_Runtime_Events_Processing_Processors_proto_init() {
	if File_Runtime_Events_Processing_Processors_proto != nil {
		return
	}
	file_Runtime_Events_Processing_StreamEvent_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Runtime_Events_Processing_Processors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Processors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryProcessingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Processors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Processors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Processors_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorClientToRuntimeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Processors_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Processors_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Processors_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorRuntimeToClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Runtime_Events_Processing_Processors_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ProcessorClientToRuntimeMessage_RegistrationRequest)(nil),
		(*ProcessorClientToRuntimeMessage_ProcessingResult)(nil),
		(*ProcessorClientToRuntimeMessage_Pong)(nil),
	}
	file_Runtime_Events_Processing_Processors_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ProcessorRuntimeToClientMessage_RegistrationResponse)(nil),
		(*ProcessorRuntimeToClientMessage_HandleRequest)(nil),
		(*ProcessorRuntimeToClientMessage_Ping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Runtime_Events_Processing_Processors_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Runtime_Events_Processing_Processors_proto_goTypes,
		DependencyIndexes: file_Runtime_Events_Processing_Processors_proto_depIdxs,
		MessageInfos:      file_Runtime_Events_Processing_Processors_proto_msgTypes,
	}.Build()
	File_Runtime_Events_Processing_Processors_proto = out.File
	file_Runtime_Events_Processing_Processors_proto_rawDesc = nil
	file_Runtime_Events_Processing_Processors_proto_goTypes = nil
	file_Runtime_Events_Processing_Processors_proto_depIdxs = nil
}
