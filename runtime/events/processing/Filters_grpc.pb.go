// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package processing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FiltersClient is the client API for Filters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiltersClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Filters_ConnectClient, error)
	ConnectPartitioned(ctx context.Context, opts ...grpc.CallOption) (Filters_ConnectPartitionedClient, error)
	ConnectPublic(ctx context.Context, opts ...grpc.CallOption) (Filters_ConnectPublicClient, error)
}

type filtersClient struct {
	cc grpc.ClientConnInterface
}

func NewFiltersClient(cc grpc.ClientConnInterface) FiltersClient {
	return &filtersClient{cc}
}

func (c *filtersClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Filters_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filters_ServiceDesc.Streams[0], "/dolittle.runtime.events.processing.Filters/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &filtersConnectClient{stream}
	return x, nil
}

type Filters_ConnectClient interface {
	Send(*FilterClientToRuntimeMessage) error
	Recv() (*FilterRuntimeToClientMessage, error)
	grpc.ClientStream
}

type filtersConnectClient struct {
	grpc.ClientStream
}

func (x *filtersConnectClient) Send(m *FilterClientToRuntimeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filtersConnectClient) Recv() (*FilterRuntimeToClientMessage, error) {
	m := new(FilterRuntimeToClientMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filtersClient) ConnectPartitioned(ctx context.Context, opts ...grpc.CallOption) (Filters_ConnectPartitionedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filters_ServiceDesc.Streams[1], "/dolittle.runtime.events.processing.Filters/ConnectPartitioned", opts...)
	if err != nil {
		return nil, err
	}
	x := &filtersConnectPartitionedClient{stream}
	return x, nil
}

type Filters_ConnectPartitionedClient interface {
	Send(*PartitionedFilterClientToRuntimeMessage) error
	Recv() (*FilterRuntimeToClientMessage, error)
	grpc.ClientStream
}

type filtersConnectPartitionedClient struct {
	grpc.ClientStream
}

func (x *filtersConnectPartitionedClient) Send(m *PartitionedFilterClientToRuntimeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filtersConnectPartitionedClient) Recv() (*FilterRuntimeToClientMessage, error) {
	m := new(FilterRuntimeToClientMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filtersClient) ConnectPublic(ctx context.Context, opts ...grpc.CallOption) (Filters_ConnectPublicClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filters_ServiceDesc.Streams[2], "/dolittle.runtime.events.processing.Filters/ConnectPublic", opts...)
	if err != nil {
		return nil, err
	}
	x := &filtersConnectPublicClient{stream}
	return x, nil
}

type Filters_ConnectPublicClient interface {
	Send(*PublicFilterClientToRuntimeMessage) error
	Recv() (*FilterRuntimeToClientMessage, error)
	grpc.ClientStream
}

type filtersConnectPublicClient struct {
	grpc.ClientStream
}

func (x *filtersConnectPublicClient) Send(m *PublicFilterClientToRuntimeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filtersConnectPublicClient) Recv() (*FilterRuntimeToClientMessage, error) {
	m := new(FilterRuntimeToClientMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FiltersServer is the server API for Filters service.
// All implementations must embed UnimplementedFiltersServer
// for forward compatibility
type FiltersServer interface {
	Connect(Filters_ConnectServer) error
	ConnectPartitioned(Filters_ConnectPartitionedServer) error
	ConnectPublic(Filters_ConnectPublicServer) error
	mustEmbedUnimplementedFiltersServer()
}

// UnimplementedFiltersServer must be embedded to have forward compatible implementations.
type UnimplementedFiltersServer struct {
}

func (UnimplementedFiltersServer) Connect(Filters_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedFiltersServer) ConnectPartitioned(Filters_ConnectPartitionedServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectPartitioned not implemented")
}
func (UnimplementedFiltersServer) ConnectPublic(Filters_ConnectPublicServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectPublic not implemented")
}
func (UnimplementedFiltersServer) mustEmbedUnimplementedFiltersServer() {}

// UnsafeFiltersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiltersServer will
// result in compilation errors.
type UnsafeFiltersServer interface {
	mustEmbedUnimplementedFiltersServer()
}

func RegisterFiltersServer(s grpc.ServiceRegistrar, srv FiltersServer) {
	s.RegisterService(&Filters_ServiceDesc, srv)
}

func _Filters_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FiltersServer).Connect(&filtersConnectServer{stream})
}

type Filters_ConnectServer interface {
	Send(*FilterRuntimeToClientMessage) error
	Recv() (*FilterClientToRuntimeMessage, error)
	grpc.ServerStream
}

type filtersConnectServer struct {
	grpc.ServerStream
}

func (x *filtersConnectServer) Send(m *FilterRuntimeToClientMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filtersConnectServer) Recv() (*FilterClientToRuntimeMessage, error) {
	m := new(FilterClientToRuntimeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Filters_ConnectPartitioned_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FiltersServer).ConnectPartitioned(&filtersConnectPartitionedServer{stream})
}

type Filters_ConnectPartitionedServer interface {
	Send(*FilterRuntimeToClientMessage) error
	Recv() (*PartitionedFilterClientToRuntimeMessage, error)
	grpc.ServerStream
}

type filtersConnectPartitionedServer struct {
	grpc.ServerStream
}

func (x *filtersConnectPartitionedServer) Send(m *FilterRuntimeToClientMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filtersConnectPartitionedServer) Recv() (*PartitionedFilterClientToRuntimeMessage, error) {
	m := new(PartitionedFilterClientToRuntimeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Filters_ConnectPublic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FiltersServer).ConnectPublic(&filtersConnectPublicServer{stream})
}

type Filters_ConnectPublicServer interface {
	Send(*FilterRuntimeToClientMessage) error
	Recv() (*PublicFilterClientToRuntimeMessage, error)
	grpc.ServerStream
}

type filtersConnectPublicServer struct {
	grpc.ServerStream
}

func (x *filtersConnectPublicServer) Send(m *FilterRuntimeToClientMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filtersConnectPublicServer) Recv() (*PublicFilterClientToRuntimeMessage, error) {
	m := new(PublicFilterClientToRuntimeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Filters_ServiceDesc is the grpc.ServiceDesc for Filters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dolittle.runtime.events.processing.Filters",
	HandlerType: (*FiltersServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Filters_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConnectPartitioned",
			Handler:       _Filters_ConnectPartitioned_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConnectPublic",
			Handler:       _Filters_ConnectPublic_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Runtime/Events.Processing/Filters.proto",
}
