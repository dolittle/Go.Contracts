// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: Runtime/Events.Processing/Projections.proto

package processing

import (
	artifacts "go.dolittle.io/contracts/v5/artifacts"
	protobuf "go.dolittle.io/contracts/v5/protobuf"
	projections "go.dolittle.io/contracts/v5/runtime/projections"
	services "go.dolittle.io/contracts/v5/services"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProjectionEventKeySelectorType int32

const (
	ProjectionEventKeySelectorType_EVENT_SOURCE_ID ProjectionEventKeySelectorType = 0
	ProjectionEventKeySelectorType_PARTITION_ID    ProjectionEventKeySelectorType = 1
	ProjectionEventKeySelectorType_PROPERTY        ProjectionEventKeySelectorType = 2
)

// Enum value maps for ProjectionEventKeySelectorType.
var (
	ProjectionEventKeySelectorType_name = map[int32]string{
		0: "EVENT_SOURCE_ID",
		1: "PARTITION_ID",
		2: "PROPERTY",
	}
	ProjectionEventKeySelectorType_value = map[string]int32{
		"EVENT_SOURCE_ID": 0,
		"PARTITION_ID":    1,
		"PROPERTY":        2,
	}
)

func (x ProjectionEventKeySelectorType) Enum() *ProjectionEventKeySelectorType {
	p := new(ProjectionEventKeySelectorType)
	*p = x
	return p
}

func (x ProjectionEventKeySelectorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectionEventKeySelectorType) Descriptor() protoreflect.EnumDescriptor {
	return file_Runtime_Events_Processing_Projections_proto_enumTypes[0].Descriptor()
}

func (ProjectionEventKeySelectorType) Type() protoreflect.EnumType {
	return &file_Runtime_Events_Processing_Projections_proto_enumTypes[0]
}

func (x ProjectionEventKeySelectorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectionEventKeySelectorType.Descriptor instead.
func (ProjectionEventKeySelectorType) EnumDescriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{0}
}

type ProjectionNextStateType int32

const (
	ProjectionNextStateType_REPLACE ProjectionNextStateType = 0
	ProjectionNextStateType_DELETE  ProjectionNextStateType = 1
)

// Enum value maps for ProjectionNextStateType.
var (
	ProjectionNextStateType_name = map[int32]string{
		0: "REPLACE",
		1: "DELETE",
	}
	ProjectionNextStateType_value = map[string]int32{
		"REPLACE": 0,
		"DELETE":  1,
	}
)

func (x ProjectionNextStateType) Enum() *ProjectionNextStateType {
	p := new(ProjectionNextStateType)
	*p = x
	return p
}

func (x ProjectionNextStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectionNextStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_Runtime_Events_Processing_Projections_proto_enumTypes[1].Descriptor()
}

func (ProjectionNextStateType) Type() protoreflect.EnumType {
	return &file_Runtime_Events_Processing_Projections_proto_enumTypes[1]
}

func (x ProjectionNextStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectionNextStateType.Descriptor instead.
func (ProjectionNextStateType) EnumDescriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{1}
}

type ProjectionEventKeySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       ProjectionEventKeySelectorType `protobuf:"varint,1,opt,name=type,proto3,enum=dolittle.runtime.events.processing.ProjectionEventKeySelectorType" json:"type,omitempty"`
	Expression string                         `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ProjectionEventKeySelector) Reset() {
	*x = ProjectionEventKeySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionEventKeySelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionEventKeySelector) ProtoMessage() {}

func (x *ProjectionEventKeySelector) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionEventKeySelector.ProtoReflect.Descriptor instead.
func (*ProjectionEventKeySelector) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectionEventKeySelector) GetType() ProjectionEventKeySelectorType {
	if x != nil {
		return x.Type
	}
	return ProjectionEventKeySelectorType_EVENT_SOURCE_ID
}

func (x *ProjectionEventKeySelector) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type ProjectionEventSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType   *artifacts.Artifact         `protobuf:"bytes,1,opt,name=eventType,proto3" json:"eventType,omitempty"`
	KeySelector *ProjectionEventKeySelector `protobuf:"bytes,2,opt,name=keySelector,proto3" json:"keySelector,omitempty"`
}

func (x *ProjectionEventSelector) Reset() {
	*x = ProjectionEventSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionEventSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionEventSelector) ProtoMessage() {}

func (x *ProjectionEventSelector) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionEventSelector.ProtoReflect.Descriptor instead.
func (*ProjectionEventSelector) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectionEventSelector) GetEventType() *artifacts.Artifact {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *ProjectionEventSelector) GetKeySelector() *ProjectionEventKeySelector {
	if x != nil {
		return x.KeySelector
	}
	return nil
}

type ProjectionRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext  *services.ReverseCallArgumentsContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	ScopeId      *protobuf.Uuid                        `protobuf:"bytes,2,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	ProjectionId *protobuf.Uuid                        `protobuf:"bytes,3,opt,name=projectionId,proto3" json:"projectionId,omitempty"`
	Events       []*ProjectionEventSelector            `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	InitialState string                                `protobuf:"bytes,5,opt,name=initialState,proto3" json:"initialState,omitempty"`
}

func (x *ProjectionRegistrationRequest) Reset() {
	*x = ProjectionRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionRegistrationRequest) ProtoMessage() {}

func (x *ProjectionRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionRegistrationRequest.ProtoReflect.Descriptor instead.
func (*ProjectionRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectionRegistrationRequest) GetCallContext() *services.ReverseCallArgumentsContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *ProjectionRegistrationRequest) GetScopeId() *protobuf.Uuid {
	if x != nil {
		return x.ScopeId
	}
	return nil
}

func (x *ProjectionRegistrationRequest) GetProjectionId() *protobuf.Uuid {
	if x != nil {
		return x.ProjectionId
	}
	return nil
}

func (x *ProjectionRegistrationRequest) GetEvents() []*ProjectionEventSelector {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ProjectionRegistrationRequest) GetInitialState() string {
	if x != nil {
		return x.InitialState
	}
	return ""
}

type ProjectionNextState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ProjectionNextStateType `protobuf:"varint,1,opt,name=type,proto3,enum=dolittle.runtime.events.processing.ProjectionNextStateType" json:"type,omitempty"`
	Value string                  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProjectionNextState) Reset() {
	*x = ProjectionNextState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionNextState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionNextState) ProtoMessage() {}

func (x *ProjectionNextState) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionNextState.ProtoReflect.Descriptor instead.
func (*ProjectionNextState) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectionNextState) GetType() ProjectionNextStateType {
	if x != nil {
		return x.Type
	}
	return ProjectionNextStateType_REPLACE
}

func (x *ProjectionNextState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ProjectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext *services.ReverseCallResponseContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	NextState   *ProjectionNextState                 `protobuf:"bytes,2,opt,name=nextState,proto3" json:"nextState,omitempty"`
	Failure     *ProcessorFailure                    `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"` // If not set/empty - no failure
}

func (x *ProjectionResponse) Reset() {
	*x = ProjectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionResponse) ProtoMessage() {}

func (x *ProjectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionResponse.ProtoReflect.Descriptor instead.
func (*ProjectionResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectionResponse) GetCallContext() *services.ReverseCallResponseContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *ProjectionResponse) GetNextState() *ProjectionNextState {
	if x != nil {
		return x.NextState
	}
	return nil
}

func (x *ProjectionResponse) GetFailure() *ProcessorFailure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type ProjectionClientToRuntimeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*ProjectionClientToRuntimeMessage_RegistrationRequest
	//	*ProjectionClientToRuntimeMessage_HandleResult
	//	*ProjectionClientToRuntimeMessage_Pong
	Message isProjectionClientToRuntimeMessage_Message `protobuf_oneof:"Message"`
}

func (x *ProjectionClientToRuntimeMessage) Reset() {
	*x = ProjectionClientToRuntimeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionClientToRuntimeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionClientToRuntimeMessage) ProtoMessage() {}

func (x *ProjectionClientToRuntimeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionClientToRuntimeMessage.ProtoReflect.Descriptor instead.
func (*ProjectionClientToRuntimeMessage) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{5}
}

func (m *ProjectionClientToRuntimeMessage) GetMessage() isProjectionClientToRuntimeMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ProjectionClientToRuntimeMessage) GetRegistrationRequest() *ProjectionRegistrationRequest {
	if x, ok := x.GetMessage().(*ProjectionClientToRuntimeMessage_RegistrationRequest); ok {
		return x.RegistrationRequest
	}
	return nil
}

func (x *ProjectionClientToRuntimeMessage) GetHandleResult() *ProjectionResponse {
	if x, ok := x.GetMessage().(*ProjectionClientToRuntimeMessage_HandleResult); ok {
		return x.HandleResult
	}
	return nil
}

func (x *ProjectionClientToRuntimeMessage) GetPong() *services.Pong {
	if x, ok := x.GetMessage().(*ProjectionClientToRuntimeMessage_Pong); ok {
		return x.Pong
	}
	return nil
}

type isProjectionClientToRuntimeMessage_Message interface {
	isProjectionClientToRuntimeMessage_Message()
}

type ProjectionClientToRuntimeMessage_RegistrationRequest struct {
	RegistrationRequest *ProjectionRegistrationRequest `protobuf:"bytes,1,opt,name=registrationRequest,proto3,oneof"`
}

type ProjectionClientToRuntimeMessage_HandleResult struct {
	HandleResult *ProjectionResponse `protobuf:"bytes,2,opt,name=handleResult,proto3,oneof"`
}

type ProjectionClientToRuntimeMessage_Pong struct {
	Pong *services.Pong `protobuf:"bytes,3,opt,name=pong,proto3,oneof"`
}

func (*ProjectionClientToRuntimeMessage_RegistrationRequest) isProjectionClientToRuntimeMessage_Message() {
}

func (*ProjectionClientToRuntimeMessage_HandleResult) isProjectionClientToRuntimeMessage_Message() {}

func (*ProjectionClientToRuntimeMessage_Pong) isProjectionClientToRuntimeMessage_Message() {}

type ProjectionRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *protobuf.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *ProjectionRegistrationResponse) Reset() {
	*x = ProjectionRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionRegistrationResponse) ProtoMessage() {}

func (x *ProjectionRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionRegistrationResponse.ProtoReflect.Descriptor instead.
func (*ProjectionRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{6}
}

func (x *ProjectionRegistrationResponse) GetFailure() *protobuf.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type ProjectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallContext          *services.ReverseCallRequestContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	CurrentState         *projections.ProjectionCurrentState `protobuf:"bytes,2,opt,name=currentState,proto3" json:"currentState,omitempty"`
	Event                *StreamEvent                        `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	RetryProcessingState *RetryProcessingState               `protobuf:"bytes,4,opt,name=retryProcessingState,proto3" json:"retryProcessingState,omitempty"`
}

func (x *ProjectionRequest) Reset() {
	*x = ProjectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionRequest) ProtoMessage() {}

func (x *ProjectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionRequest.ProtoReflect.Descriptor instead.
func (*ProjectionRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{7}
}

func (x *ProjectionRequest) GetCallContext() *services.ReverseCallRequestContext {
	if x != nil {
		return x.CallContext
	}
	return nil
}

func (x *ProjectionRequest) GetCurrentState() *projections.ProjectionCurrentState {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

func (x *ProjectionRequest) GetEvent() *StreamEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ProjectionRequest) GetRetryProcessingState() *RetryProcessingState {
	if x != nil {
		return x.RetryProcessingState
	}
	return nil
}

type ProjectionRuntimeToClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*ProjectionRuntimeToClientMessage_RegistrationResponse
	//	*ProjectionRuntimeToClientMessage_HandleRequest
	//	*ProjectionRuntimeToClientMessage_Ping
	Message isProjectionRuntimeToClientMessage_Message `protobuf_oneof:"Message"`
}

func (x *ProjectionRuntimeToClientMessage) Reset() {
	*x = ProjectionRuntimeToClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionRuntimeToClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionRuntimeToClientMessage) ProtoMessage() {}

func (x *ProjectionRuntimeToClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Events_Processing_Projections_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionRuntimeToClientMessage.ProtoReflect.Descriptor instead.
func (*ProjectionRuntimeToClientMessage) Descriptor() ([]byte, []int) {
	return file_Runtime_Events_Processing_Projections_proto_rawDescGZIP(), []int{8}
}

func (m *ProjectionRuntimeToClientMessage) GetMessage() isProjectionRuntimeToClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ProjectionRuntimeToClientMessage) GetRegistrationResponse() *ProjectionRegistrationResponse {
	if x, ok := x.GetMessage().(*ProjectionRuntimeToClientMessage_RegistrationResponse); ok {
		return x.RegistrationResponse
	}
	return nil
}

func (x *ProjectionRuntimeToClientMessage) GetHandleRequest() *ProjectionRequest {
	if x, ok := x.GetMessage().(*ProjectionRuntimeToClientMessage_HandleRequest); ok {
		return x.HandleRequest
	}
	return nil
}

func (x *ProjectionRuntimeToClientMessage) GetPing() *services.Ping {
	if x, ok := x.GetMessage().(*ProjectionRuntimeToClientMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

type isProjectionRuntimeToClientMessage_Message interface {
	isProjectionRuntimeToClientMessage_Message()
}

type ProjectionRuntimeToClientMessage_RegistrationResponse struct {
	RegistrationResponse *ProjectionRegistrationResponse `protobuf:"bytes,1,opt,name=registrationResponse,proto3,oneof"`
}

type ProjectionRuntimeToClientMessage_HandleRequest struct {
	HandleRequest *ProjectionRequest `protobuf:"bytes,2,opt,name=handleRequest,proto3,oneof"`
}

type ProjectionRuntimeToClientMessage_Ping struct {
	Ping *services.Ping `protobuf:"bytes,3,opt,name=ping,proto3,oneof"`
}

func (*ProjectionRuntimeToClientMessage_RegistrationResponse) isProjectionRuntimeToClientMessage_Message() {
}

func (*ProjectionRuntimeToClientMessage_HandleRequest) isProjectionRuntimeToClientMessage_Message() {}

func (*ProjectionRuntimeToClientMessage_Ping) isProjectionRuntimeToClientMessage_Message() {}

var File_Runtime_Events_Processing_Projections_proto protoreflect.FileDescriptor

var file_Runtime_Events_Processing_Projections_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x64,
	0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x1a, 0x25, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x55, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x46, 0x75, 0x6e, 0x64,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x46, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x2f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x1a,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x6b, 0x65,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xda, 0x02, 0x0a,
	0x1d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x53, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x55, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x75, 0x0a, 0x13, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2d, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x42,
	0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x1e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x14, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x78, 0x0a, 0x14,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x64, 0x6f, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04,
	0x70, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a,
	0x55, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x32, 0xa9, 0x01, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x44, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x44, 0x2e, 0x64,
	0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x66, 0x5a, 0x35, 0x67, 0x6f, 0x2e, 0x64, 0x6f, 0x6c,
	0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x2f, 0x76, 0x35, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0xaa,
	0x02, 0x2c, 0x44, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Runtime_Events_Processing_Projections_proto_rawDescOnce sync.Once
	file_Runtime_Events_Processing_Projections_proto_rawDescData = file_Runtime_Events_Processing_Projections_proto_rawDesc
)

func file_Runtime_Events_Processing_Projections_proto_rawDescGZIP() []byte {
	file_Runtime_Events_Processing_Projections_proto_rawDescOnce.Do(func() {
		file_Runtime_Events_Processing_Projections_proto_rawDescData = protoimpl.X.CompressGZIP(file_Runtime_Events_Processing_Projections_proto_rawDescData)
	})
	return file_Runtime_Events_Processing_Projections_proto_rawDescData
}

var file_Runtime_Events_Processing_Projections_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_Runtime_Events_Processing_Projections_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_Runtime_Events_Processing_Projections_proto_goTypes = []interface{}{
	(ProjectionEventKeySelectorType)(0),          // 0: dolittle.runtime.events.processing.ProjectionEventKeySelectorType
	(ProjectionNextStateType)(0),                 // 1: dolittle.runtime.events.processing.ProjectionNextStateType
	(*ProjectionEventKeySelector)(nil),           // 2: dolittle.runtime.events.processing.ProjectionEventKeySelector
	(*ProjectionEventSelector)(nil),              // 3: dolittle.runtime.events.processing.ProjectionEventSelector
	(*ProjectionRegistrationRequest)(nil),        // 4: dolittle.runtime.events.processing.ProjectionRegistrationRequest
	(*ProjectionNextState)(nil),                  // 5: dolittle.runtime.events.processing.ProjectionNextState
	(*ProjectionResponse)(nil),                   // 6: dolittle.runtime.events.processing.ProjectionResponse
	(*ProjectionClientToRuntimeMessage)(nil),     // 7: dolittle.runtime.events.processing.ProjectionClientToRuntimeMessage
	(*ProjectionRegistrationResponse)(nil),       // 8: dolittle.runtime.events.processing.ProjectionRegistrationResponse
	(*ProjectionRequest)(nil),                    // 9: dolittle.runtime.events.processing.ProjectionRequest
	(*ProjectionRuntimeToClientMessage)(nil),     // 10: dolittle.runtime.events.processing.ProjectionRuntimeToClientMessage
	(*artifacts.Artifact)(nil),                   // 11: dolittle.artifacts.Artifact
	(*services.ReverseCallArgumentsContext)(nil), // 12: dolittle.services.ReverseCallArgumentsContext
	(*protobuf.Uuid)(nil),                        // 13: dolittle.protobuf.Uuid
	(*services.ReverseCallResponseContext)(nil),  // 14: dolittle.services.ReverseCallResponseContext
	(*ProcessorFailure)(nil),                     // 15: dolittle.runtime.events.processing.ProcessorFailure
	(*services.Pong)(nil),                        // 16: dolittle.services.Pong
	(*protobuf.Failure)(nil),                     // 17: dolittle.protobuf.Failure
	(*services.ReverseCallRequestContext)(nil),   // 18: dolittle.services.ReverseCallRequestContext
	(*projections.ProjectionCurrentState)(nil),   // 19: dolittle.runtime.projections.ProjectionCurrentState
	(*StreamEvent)(nil),                          // 20: dolittle.runtime.events.processing.StreamEvent
	(*RetryProcessingState)(nil),                 // 21: dolittle.runtime.events.processing.RetryProcessingState
	(*services.Ping)(nil),                        // 22: dolittle.services.Ping
}
var file_Runtime_Events_Processing_Projections_proto_depIdxs = []int32{
	0,  // 0: dolittle.runtime.events.processing.ProjectionEventKeySelector.type:type_name -> dolittle.runtime.events.processing.ProjectionEventKeySelectorType
	11, // 1: dolittle.runtime.events.processing.ProjectionEventSelector.eventType:type_name -> dolittle.artifacts.Artifact
	2,  // 2: dolittle.runtime.events.processing.ProjectionEventSelector.keySelector:type_name -> dolittle.runtime.events.processing.ProjectionEventKeySelector
	12, // 3: dolittle.runtime.events.processing.ProjectionRegistrationRequest.callContext:type_name -> dolittle.services.ReverseCallArgumentsContext
	13, // 4: dolittle.runtime.events.processing.ProjectionRegistrationRequest.scopeId:type_name -> dolittle.protobuf.Uuid
	13, // 5: dolittle.runtime.events.processing.ProjectionRegistrationRequest.projectionId:type_name -> dolittle.protobuf.Uuid
	3,  // 6: dolittle.runtime.events.processing.ProjectionRegistrationRequest.events:type_name -> dolittle.runtime.events.processing.ProjectionEventSelector
	1,  // 7: dolittle.runtime.events.processing.ProjectionNextState.type:type_name -> dolittle.runtime.events.processing.ProjectionNextStateType
	14, // 8: dolittle.runtime.events.processing.ProjectionResponse.callContext:type_name -> dolittle.services.ReverseCallResponseContext
	5,  // 9: dolittle.runtime.events.processing.ProjectionResponse.nextState:type_name -> dolittle.runtime.events.processing.ProjectionNextState
	15, // 10: dolittle.runtime.events.processing.ProjectionResponse.failure:type_name -> dolittle.runtime.events.processing.ProcessorFailure
	4,  // 11: dolittle.runtime.events.processing.ProjectionClientToRuntimeMessage.registrationRequest:type_name -> dolittle.runtime.events.processing.ProjectionRegistrationRequest
	6,  // 12: dolittle.runtime.events.processing.ProjectionClientToRuntimeMessage.handleResult:type_name -> dolittle.runtime.events.processing.ProjectionResponse
	16, // 13: dolittle.runtime.events.processing.ProjectionClientToRuntimeMessage.pong:type_name -> dolittle.services.Pong
	17, // 14: dolittle.runtime.events.processing.ProjectionRegistrationResponse.failure:type_name -> dolittle.protobuf.Failure
	18, // 15: dolittle.runtime.events.processing.ProjectionRequest.callContext:type_name -> dolittle.services.ReverseCallRequestContext
	19, // 16: dolittle.runtime.events.processing.ProjectionRequest.currentState:type_name -> dolittle.runtime.projections.ProjectionCurrentState
	20, // 17: dolittle.runtime.events.processing.ProjectionRequest.event:type_name -> dolittle.runtime.events.processing.StreamEvent
	21, // 18: dolittle.runtime.events.processing.ProjectionRequest.retryProcessingState:type_name -> dolittle.runtime.events.processing.RetryProcessingState
	8,  // 19: dolittle.runtime.events.processing.ProjectionRuntimeToClientMessage.registrationResponse:type_name -> dolittle.runtime.events.processing.ProjectionRegistrationResponse
	9,  // 20: dolittle.runtime.events.processing.ProjectionRuntimeToClientMessage.handleRequest:type_name -> dolittle.runtime.events.processing.ProjectionRequest
	22, // 21: dolittle.runtime.events.processing.ProjectionRuntimeToClientMessage.ping:type_name -> dolittle.services.Ping
	7,  // 22: dolittle.runtime.events.processing.Projections.Connect:input_type -> dolittle.runtime.events.processing.ProjectionClientToRuntimeMessage
	10, // 23: dolittle.runtime.events.processing.Projections.Connect:output_type -> dolittle.runtime.events.processing.ProjectionRuntimeToClientMessage
	23, // [23:24] is the sub-list for method output_type
	22, // [22:23] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_Runtime_Events_Processing_Projections_proto_init() }
func file_Runtime_Events_Processing_Projections_proto_init() {
	if File_Runtime_Events_Processing_Projections_proto != nil {
		return
	}
	file_Runtime_Events_Processing_StreamEvent_proto_init()
	file_Runtime_Events_Processing_Processors_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Runtime_Events_Processing_Projections_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionEventKeySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Projections_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionEventSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Projections_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Projections_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionNextState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Projections_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Projections_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionClientToRuntimeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Projections_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Projections_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Events_Processing_Projections_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionRuntimeToClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Runtime_Events_Processing_Projections_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ProjectionClientToRuntimeMessage_RegistrationRequest)(nil),
		(*ProjectionClientToRuntimeMessage_HandleResult)(nil),
		(*ProjectionClientToRuntimeMessage_Pong)(nil),
	}
	file_Runtime_Events_Processing_Projections_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ProjectionRuntimeToClientMessage_RegistrationResponse)(nil),
		(*ProjectionRuntimeToClientMessage_HandleRequest)(nil),
		(*ProjectionRuntimeToClientMessage_Ping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Runtime_Events_Processing_Projections_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Runtime_Events_Processing_Projections_proto_goTypes,
		DependencyIndexes: file_Runtime_Events_Processing_Projections_proto_depIdxs,
		EnumInfos:         file_Runtime_Events_Processing_Projections_proto_enumTypes,
		MessageInfos:      file_Runtime_Events_Processing_Projections_proto_msgTypes,
	}.Build()
	File_Runtime_Events_Processing_Projections_proto = out.File
	file_Runtime_Events_Processing_Projections_proto_rawDesc = nil
	file_Runtime_Events_Processing_Projections_proto_goTypes = nil
	file_Runtime_Events_Processing_Projections_proto_depIdxs = nil
}
