// Copyright (c) Dolittle. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: Runtime/Management/Events.Processing/Projections.proto

package management

import (
	protobuf "go.dolittle.io/contracts/v7/protobuf"
	processing "go.dolittle.io/contracts/v7/runtime/events/processing"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReplayProjectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Do we want another kind of execution context here?
	ScopeId      *protobuf.Uuid `protobuf:"bytes,1,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	ProjectionId *protobuf.Uuid `protobuf:"bytes,2,opt,name=projectionId,proto3" json:"projectionId,omitempty"`
	TenantId     *protobuf.Uuid `protobuf:"bytes,3,opt,name=tenantId,proto3,oneof" json:"tenantId,omitempty"`
}

func (x *ReplayProjectionRequest) Reset() {
	*x = ReplayProjectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplayProjectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplayProjectionRequest) ProtoMessage() {}

func (x *ReplayProjectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplayProjectionRequest.ProtoReflect.Descriptor instead.
func (*ReplayProjectionRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Management_Events_Processing_Projections_proto_rawDescGZIP(), []int{0}
}

func (x *ReplayProjectionRequest) GetScopeId() *protobuf.Uuid {
	if x != nil {
		return x.ScopeId
	}
	return nil
}

func (x *ReplayProjectionRequest) GetProjectionId() *protobuf.Uuid {
	if x != nil {
		return x.ProjectionId
	}
	return nil
}

func (x *ReplayProjectionRequest) GetTenantId() *protobuf.Uuid {
	if x != nil {
		return x.TenantId
	}
	return nil
}

type ReplayProjectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure *protobuf.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"` // not set if not failed
}

func (x *ReplayProjectionResponse) Reset() {
	*x = ReplayProjectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplayProjectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplayProjectionResponse) ProtoMessage() {}

func (x *ReplayProjectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplayProjectionResponse.ProtoReflect.Descriptor instead.
func (*ReplayProjectionResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Management_Events_Processing_Projections_proto_rawDescGZIP(), []int{1}
}

func (x *ReplayProjectionResponse) GetFailure() *protobuf.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type GetAllProjectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Do we want another kind of execution context here?
	TenantId *protobuf.Uuid `protobuf:"bytes,1,opt,name=tenantId,proto3,oneof" json:"tenantId,omitempty"`
}

func (x *GetAllProjectionsRequest) Reset() {
	*x = GetAllProjectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProjectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProjectionsRequest) ProtoMessage() {}

func (x *GetAllProjectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProjectionsRequest.ProtoReflect.Descriptor instead.
func (*GetAllProjectionsRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Management_Events_Processing_Projections_proto_rawDescGZIP(), []int{2}
}

func (x *GetAllProjectionsRequest) GetTenantId() *protobuf.Uuid {
	if x != nil {
		return x.TenantId
	}
	return nil
}

type ProjectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeId      *protobuf.Uuid                        `protobuf:"bytes,1,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	ProjectionId *protobuf.Uuid                        `protobuf:"bytes,2,opt,name=projectionId,proto3" json:"projectionId,omitempty"`
	Events       []*processing.ProjectionEventSelector `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	InitialState string                                `protobuf:"bytes,5,opt,name=initialState,proto3" json:"initialState,omitempty"`
	Copies       *processing.ProjectionCopies          `protobuf:"bytes,6,opt,name=copies,proto3" json:"copies,omitempty"`
	Alias        string                                `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	Tenants      []*TenantScopedStreamProcessorStatus  `protobuf:"bytes,8,rep,name=tenants,proto3" json:"tenants,omitempty"`
}

func (x *ProjectionStatus) Reset() {
	*x = ProjectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionStatus) ProtoMessage() {}

func (x *ProjectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionStatus.ProtoReflect.Descriptor instead.
func (*ProjectionStatus) Descriptor() ([]byte, []int) {
	return file_Runtime_Management_Events_Processing_Projections_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectionStatus) GetScopeId() *protobuf.Uuid {
	if x != nil {
		return x.ScopeId
	}
	return nil
}

func (x *ProjectionStatus) GetProjectionId() *protobuf.Uuid {
	if x != nil {
		return x.ProjectionId
	}
	return nil
}

func (x *ProjectionStatus) GetEvents() []*processing.ProjectionEventSelector {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ProjectionStatus) GetInitialState() string {
	if x != nil {
		return x.InitialState
	}
	return ""
}

func (x *ProjectionStatus) GetCopies() *processing.ProjectionCopies {
	if x != nil {
		return x.Copies
	}
	return nil
}

func (x *ProjectionStatus) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ProjectionStatus) GetTenants() []*TenantScopedStreamProcessorStatus {
	if x != nil {
		return x.Tenants
	}
	return nil
}

type GetAllProjectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure     *protobuf.Failure   `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"` // not set if not failed
	Projections []*ProjectionStatus `protobuf:"bytes,2,rep,name=projections,proto3" json:"projections,omitempty"`
}

func (x *GetAllProjectionsResponse) Reset() {
	*x = GetAllProjectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProjectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProjectionsResponse) ProtoMessage() {}

func (x *GetAllProjectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProjectionsResponse.ProtoReflect.Descriptor instead.
func (*GetAllProjectionsResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Management_Events_Processing_Projections_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllProjectionsResponse) GetFailure() *protobuf.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *GetAllProjectionsResponse) GetProjections() []*ProjectionStatus {
	if x != nil {
		return x.Projections
	}
	return nil
}

type GetOneProjectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Do we want another kind of execution context here?
	ScopeId      *protobuf.Uuid `protobuf:"bytes,1,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	ProjectionId *protobuf.Uuid `protobuf:"bytes,2,opt,name=projectionId,proto3" json:"projectionId,omitempty"`
	TenantId     *protobuf.Uuid `protobuf:"bytes,3,opt,name=tenantId,proto3,oneof" json:"tenantId,omitempty"`
}

func (x *GetOneProjectionRequest) Reset() {
	*x = GetOneProjectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneProjectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneProjectionRequest) ProtoMessage() {}

func (x *GetOneProjectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneProjectionRequest.ProtoReflect.Descriptor instead.
func (*GetOneProjectionRequest) Descriptor() ([]byte, []int) {
	return file_Runtime_Management_Events_Processing_Projections_proto_rawDescGZIP(), []int{5}
}

func (x *GetOneProjectionRequest) GetScopeId() *protobuf.Uuid {
	if x != nil {
		return x.ScopeId
	}
	return nil
}

func (x *GetOneProjectionRequest) GetProjectionId() *protobuf.Uuid {
	if x != nil {
		return x.ProjectionId
	}
	return nil
}

func (x *GetOneProjectionRequest) GetTenantId() *protobuf.Uuid {
	if x != nil {
		return x.TenantId
	}
	return nil
}

type GetOneProjectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure    *protobuf.Failure `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"` // not set if not failed
	Projection *ProjectionStatus `protobuf:"bytes,2,opt,name=projection,proto3" json:"projection,omitempty"`
}

func (x *GetOneProjectionResponse) Reset() {
	*x = GetOneProjectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneProjectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneProjectionResponse) ProtoMessage() {}

func (x *GetOneProjectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneProjectionResponse.ProtoReflect.Descriptor instead.
func (*GetOneProjectionResponse) Descriptor() ([]byte, []int) {
	return file_Runtime_Management_Events_Processing_Projections_proto_rawDescGZIP(), []int{6}
}

func (x *GetOneProjectionResponse) GetFailure() *protobuf.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *GetOneProjectionResponse) GetProjection() *ProjectionStatus {
	if x != nil {
		return x.Projection
	}
	return nil
}

var File_Runtime_Management_Events_Processing_Projections_proto protoreflect.FileDescriptor

var file_Runtime_Management_Events_Processing_Projections_proto_rawDesc = []byte{
	0x0a, 0x36, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x55, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x50, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x22, 0x61, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xcb, 0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x6f,
	0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x70, 0x69,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x61, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74,
	0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69,
	0x64, 0x52, 0x07, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb1,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64,
	0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0xe3, 0x03, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x46, 0x2e,
	0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b,
	0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x47, 0x2e, 0x64, 0x6f, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x48, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x46, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x47, 0x2e, 0x64, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7c, 0x5a, 0x40, 0x67, 0x6f, 0x2e, 0x64,
	0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x37, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xaa, 0x02, 0x37, 0x44,
	0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Runtime_Management_Events_Processing_Projections_proto_rawDescOnce sync.Once
	file_Runtime_Management_Events_Processing_Projections_proto_rawDescData = file_Runtime_Management_Events_Processing_Projections_proto_rawDesc
)

func file_Runtime_Management_Events_Processing_Projections_proto_rawDescGZIP() []byte {
	file_Runtime_Management_Events_Processing_Projections_proto_rawDescOnce.Do(func() {
		file_Runtime_Management_Events_Processing_Projections_proto_rawDescData = protoimpl.X.CompressGZIP(file_Runtime_Management_Events_Processing_Projections_proto_rawDescData)
	})
	return file_Runtime_Management_Events_Processing_Projections_proto_rawDescData
}

var file_Runtime_Management_Events_Processing_Projections_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_Runtime_Management_Events_Processing_Projections_proto_goTypes = []interface{}{
	(*ReplayProjectionRequest)(nil),            // 0: dolittle.runtime.events.processing.management.ReplayProjectionRequest
	(*ReplayProjectionResponse)(nil),           // 1: dolittle.runtime.events.processing.management.ReplayProjectionResponse
	(*GetAllProjectionsRequest)(nil),           // 2: dolittle.runtime.events.processing.management.GetAllProjectionsRequest
	(*ProjectionStatus)(nil),                   // 3: dolittle.runtime.events.processing.management.ProjectionStatus
	(*GetAllProjectionsResponse)(nil),          // 4: dolittle.runtime.events.processing.management.GetAllProjectionsResponse
	(*GetOneProjectionRequest)(nil),            // 5: dolittle.runtime.events.processing.management.GetOneProjectionRequest
	(*GetOneProjectionResponse)(nil),           // 6: dolittle.runtime.events.processing.management.GetOneProjectionResponse
	(*protobuf.Uuid)(nil),                      // 7: dolittle.protobuf.Uuid
	(*protobuf.Failure)(nil),                   // 8: dolittle.protobuf.Failure
	(*processing.ProjectionEventSelector)(nil), // 9: dolittle.runtime.events.processing.ProjectionEventSelector
	(*processing.ProjectionCopies)(nil),        // 10: dolittle.runtime.events.processing.ProjectionCopies
	(*TenantScopedStreamProcessorStatus)(nil),  // 11: dolittle.runtime.events.processing.management.TenantScopedStreamProcessorStatus
}
var file_Runtime_Management_Events_Processing_Projections_proto_depIdxs = []int32{
	7,  // 0: dolittle.runtime.events.processing.management.ReplayProjectionRequest.scopeId:type_name -> dolittle.protobuf.Uuid
	7,  // 1: dolittle.runtime.events.processing.management.ReplayProjectionRequest.projectionId:type_name -> dolittle.protobuf.Uuid
	7,  // 2: dolittle.runtime.events.processing.management.ReplayProjectionRequest.tenantId:type_name -> dolittle.protobuf.Uuid
	8,  // 3: dolittle.runtime.events.processing.management.ReplayProjectionResponse.failure:type_name -> dolittle.protobuf.Failure
	7,  // 4: dolittle.runtime.events.processing.management.GetAllProjectionsRequest.tenantId:type_name -> dolittle.protobuf.Uuid
	7,  // 5: dolittle.runtime.events.processing.management.ProjectionStatus.scopeId:type_name -> dolittle.protobuf.Uuid
	7,  // 6: dolittle.runtime.events.processing.management.ProjectionStatus.projectionId:type_name -> dolittle.protobuf.Uuid
	9,  // 7: dolittle.runtime.events.processing.management.ProjectionStatus.events:type_name -> dolittle.runtime.events.processing.ProjectionEventSelector
	10, // 8: dolittle.runtime.events.processing.management.ProjectionStatus.copies:type_name -> dolittle.runtime.events.processing.ProjectionCopies
	11, // 9: dolittle.runtime.events.processing.management.ProjectionStatus.tenants:type_name -> dolittle.runtime.events.processing.management.TenantScopedStreamProcessorStatus
	8,  // 10: dolittle.runtime.events.processing.management.GetAllProjectionsResponse.failure:type_name -> dolittle.protobuf.Failure
	3,  // 11: dolittle.runtime.events.processing.management.GetAllProjectionsResponse.projections:type_name -> dolittle.runtime.events.processing.management.ProjectionStatus
	7,  // 12: dolittle.runtime.events.processing.management.GetOneProjectionRequest.scopeId:type_name -> dolittle.protobuf.Uuid
	7,  // 13: dolittle.runtime.events.processing.management.GetOneProjectionRequest.projectionId:type_name -> dolittle.protobuf.Uuid
	7,  // 14: dolittle.runtime.events.processing.management.GetOneProjectionRequest.tenantId:type_name -> dolittle.protobuf.Uuid
	8,  // 15: dolittle.runtime.events.processing.management.GetOneProjectionResponse.failure:type_name -> dolittle.protobuf.Failure
	3,  // 16: dolittle.runtime.events.processing.management.GetOneProjectionResponse.projection:type_name -> dolittle.runtime.events.processing.management.ProjectionStatus
	0,  // 17: dolittle.runtime.events.processing.management.Projections.Replay:input_type -> dolittle.runtime.events.processing.management.ReplayProjectionRequest
	2,  // 18: dolittle.runtime.events.processing.management.Projections.GetAll:input_type -> dolittle.runtime.events.processing.management.GetAllProjectionsRequest
	5,  // 19: dolittle.runtime.events.processing.management.Projections.GetOne:input_type -> dolittle.runtime.events.processing.management.GetOneProjectionRequest
	1,  // 20: dolittle.runtime.events.processing.management.Projections.Replay:output_type -> dolittle.runtime.events.processing.management.ReplayProjectionResponse
	4,  // 21: dolittle.runtime.events.processing.management.Projections.GetAll:output_type -> dolittle.runtime.events.processing.management.GetAllProjectionsResponse
	6,  // 22: dolittle.runtime.events.processing.management.Projections.GetOne:output_type -> dolittle.runtime.events.processing.management.GetOneProjectionResponse
	20, // [20:23] is the sub-list for method output_type
	17, // [17:20] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_Runtime_Management_Events_Processing_Projections_proto_init() }
func file_Runtime_Management_Events_Processing_Projections_proto_init() {
	if File_Runtime_Management_Events_Processing_Projections_proto != nil {
		return
	}
	file_Runtime_Management_Events_Processing_StreamProcessors_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplayProjectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplayProjectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProjectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProjectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneProjectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneProjectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_Runtime_Management_Events_Processing_Projections_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Runtime_Management_Events_Processing_Projections_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Runtime_Management_Events_Processing_Projections_proto_goTypes,
		DependencyIndexes: file_Runtime_Management_Events_Processing_Projections_proto_depIdxs,
		MessageInfos:      file_Runtime_Management_Events_Processing_Projections_proto_msgTypes,
	}.Build()
	File_Runtime_Management_Events_Processing_Projections_proto = out.File
	file_Runtime_Management_Events_Processing_Projections_proto_rawDesc = nil
	file_Runtime_Management_Events_Processing_Projections_proto_goTypes = nil
	file_Runtime_Management_Events_Processing_Projections_proto_depIdxs = nil
}
