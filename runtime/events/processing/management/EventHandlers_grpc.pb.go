// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventHandlersClient is the client API for EventHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventHandlersClient interface {
	ReprocessEventsFrom(ctx context.Context, in *ReprocessEventsFromRequest, opts ...grpc.CallOption) (*ReprocessEventsFromResponse, error)
	ReprocessAllEvents(ctx context.Context, in *ReprocessAllEventsRequest, opts ...grpc.CallOption) (*ReprocessAllEventsResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type eventHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewEventHandlersClient(cc grpc.ClientConnInterface) EventHandlersClient {
	return &eventHandlersClient{cc}
}

func (c *eventHandlersClient) ReprocessEventsFrom(ctx context.Context, in *ReprocessEventsFromRequest, opts ...grpc.CallOption) (*ReprocessEventsFromResponse, error) {
	out := new(ReprocessEventsFromResponse)
	err := c.cc.Invoke(ctx, "/dolittle.runtime.events.processing.management.EventHandlers/ReprocessEventsFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlersClient) ReprocessAllEvents(ctx context.Context, in *ReprocessAllEventsRequest, opts ...grpc.CallOption) (*ReprocessAllEventsResponse, error) {
	out := new(ReprocessAllEventsResponse)
	err := c.cc.Invoke(ctx, "/dolittle.runtime.events.processing.management.EventHandlers/ReprocessAllEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlersClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/dolittle.runtime.events.processing.management.EventHandlers/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventHandlersServer is the server API for EventHandlers service.
// All implementations must embed UnimplementedEventHandlersServer
// for forward compatibility
type EventHandlersServer interface {
	ReprocessEventsFrom(context.Context, *ReprocessEventsFromRequest) (*ReprocessEventsFromResponse, error)
	ReprocessAllEvents(context.Context, *ReprocessAllEventsRequest) (*ReprocessAllEventsResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	mustEmbedUnimplementedEventHandlersServer()
}

// UnimplementedEventHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedEventHandlersServer struct {
}

func (UnimplementedEventHandlersServer) ReprocessEventsFrom(context.Context, *ReprocessEventsFromRequest) (*ReprocessEventsFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReprocessEventsFrom not implemented")
}
func (UnimplementedEventHandlersServer) ReprocessAllEvents(context.Context, *ReprocessAllEventsRequest) (*ReprocessAllEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReprocessAllEvents not implemented")
}
func (UnimplementedEventHandlersServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEventHandlersServer) mustEmbedUnimplementedEventHandlersServer() {}

// UnsafeEventHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventHandlersServer will
// result in compilation errors.
type UnsafeEventHandlersServer interface {
	mustEmbedUnimplementedEventHandlersServer()
}

func RegisterEventHandlersServer(s grpc.ServiceRegistrar, srv EventHandlersServer) {
	s.RegisterService(&EventHandlers_ServiceDesc, srv)
}

func _EventHandlers_ReprocessEventsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReprocessEventsFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlersServer).ReprocessEventsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolittle.runtime.events.processing.management.EventHandlers/ReprocessEventsFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlersServer).ReprocessEventsFrom(ctx, req.(*ReprocessEventsFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandlers_ReprocessAllEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReprocessAllEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlersServer).ReprocessAllEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolittle.runtime.events.processing.management.EventHandlers/ReprocessAllEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlersServer).ReprocessAllEvents(ctx, req.(*ReprocessAllEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandlers_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlersServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolittle.runtime.events.processing.management.EventHandlers/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlersServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventHandlers_ServiceDesc is the grpc.ServiceDesc for EventHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dolittle.runtime.events.processing.management.EventHandlers",
	HandlerType: (*EventHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReprocessEventsFrom",
			Handler:    _EventHandlers_ReprocessEventsFrom_Handler,
		},
		{
			MethodName: "ReprocessAllEvents",
			Handler:    _EventHandlers_ReprocessAllEvents_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _EventHandlers_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Runtime/Management/Events.Processing/EventHandlers.proto",
}
