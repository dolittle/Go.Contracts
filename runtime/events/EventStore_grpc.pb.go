// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: Runtime/Events/EventStore.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStoreClient is the client API for EventStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStoreClient interface {
	Commit(ctx context.Context, in *CommitEventsRequest, opts ...grpc.CallOption) (*CommitEventsResponse, error)
	CommitForAggregate(ctx context.Context, in *CommitAggregateEventsRequest, opts ...grpc.CallOption) (*CommitAggregateEventsResponse, error)
	FetchForAggregate(ctx context.Context, in *FetchForAggregateRequest, opts ...grpc.CallOption) (*FetchForAggregateResponse, error)
	FetchForAggregateInBatches(ctx context.Context, in *FetchForAggregateInBatchesRequest, opts ...grpc.CallOption) (EventStore_FetchForAggregateInBatchesClient, error)
}

type eventStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreClient(cc grpc.ClientConnInterface) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) Commit(ctx context.Context, in *CommitEventsRequest, opts ...grpc.CallOption) (*CommitEventsResponse, error) {
	out := new(CommitEventsResponse)
	err := c.cc.Invoke(ctx, "/dolittle.runtime.events.EventStore/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) CommitForAggregate(ctx context.Context, in *CommitAggregateEventsRequest, opts ...grpc.CallOption) (*CommitAggregateEventsResponse, error) {
	out := new(CommitAggregateEventsResponse)
	err := c.cc.Invoke(ctx, "/dolittle.runtime.events.EventStore/CommitForAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) FetchForAggregate(ctx context.Context, in *FetchForAggregateRequest, opts ...grpc.CallOption) (*FetchForAggregateResponse, error) {
	out := new(FetchForAggregateResponse)
	err := c.cc.Invoke(ctx, "/dolittle.runtime.events.EventStore/FetchForAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) FetchForAggregateInBatches(ctx context.Context, in *FetchForAggregateInBatchesRequest, opts ...grpc.CallOption) (EventStore_FetchForAggregateInBatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStore_ServiceDesc.Streams[0], "/dolittle.runtime.events.EventStore/FetchForAggregateInBatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreFetchForAggregateInBatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStore_FetchForAggregateInBatchesClient interface {
	Recv() (*FetchForAggregateResponse, error)
	grpc.ClientStream
}

type eventStoreFetchForAggregateInBatchesClient struct {
	grpc.ClientStream
}

func (x *eventStoreFetchForAggregateInBatchesClient) Recv() (*FetchForAggregateResponse, error) {
	m := new(FetchForAggregateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStoreServer is the server API for EventStore service.
// All implementations must embed UnimplementedEventStoreServer
// for forward compatibility
type EventStoreServer interface {
	Commit(context.Context, *CommitEventsRequest) (*CommitEventsResponse, error)
	CommitForAggregate(context.Context, *CommitAggregateEventsRequest) (*CommitAggregateEventsResponse, error)
	FetchForAggregate(context.Context, *FetchForAggregateRequest) (*FetchForAggregateResponse, error)
	FetchForAggregateInBatches(*FetchForAggregateInBatchesRequest, EventStore_FetchForAggregateInBatchesServer) error
	mustEmbedUnimplementedEventStoreServer()
}

// UnimplementedEventStoreServer must be embedded to have forward compatible implementations.
type UnimplementedEventStoreServer struct {
}

func (UnimplementedEventStoreServer) Commit(context.Context, *CommitEventsRequest) (*CommitEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedEventStoreServer) CommitForAggregate(context.Context, *CommitAggregateEventsRequest) (*CommitAggregateEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitForAggregate not implemented")
}
func (UnimplementedEventStoreServer) FetchForAggregate(context.Context, *FetchForAggregateRequest) (*FetchForAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchForAggregate not implemented")
}
func (UnimplementedEventStoreServer) FetchForAggregateInBatches(*FetchForAggregateInBatchesRequest, EventStore_FetchForAggregateInBatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchForAggregateInBatches not implemented")
}
func (UnimplementedEventStoreServer) mustEmbedUnimplementedEventStoreServer() {}

// UnsafeEventStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServer will
// result in compilation errors.
type UnsafeEventStoreServer interface {
	mustEmbedUnimplementedEventStoreServer()
}

func RegisterEventStoreServer(s grpc.ServiceRegistrar, srv EventStoreServer) {
	s.RegisterService(&EventStore_ServiceDesc, srv)
}

func _EventStore_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolittle.runtime.events.EventStore/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).Commit(ctx, req.(*CommitEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_CommitForAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitAggregateEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).CommitForAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolittle.runtime.events.EventStore/CommitForAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).CommitForAggregate(ctx, req.(*CommitAggregateEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_FetchForAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchForAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).FetchForAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dolittle.runtime.events.EventStore/FetchForAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).FetchForAggregate(ctx, req.(*FetchForAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_FetchForAggregateInBatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchForAggregateInBatchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServer).FetchForAggregateInBatches(m, &eventStoreFetchForAggregateInBatchesServer{stream})
}

type EventStore_FetchForAggregateInBatchesServer interface {
	Send(*FetchForAggregateResponse) error
	grpc.ServerStream
}

type eventStoreFetchForAggregateInBatchesServer struct {
	grpc.ServerStream
}

func (x *eventStoreFetchForAggregateInBatchesServer) Send(m *FetchForAggregateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventStore_ServiceDesc is the grpc.ServiceDesc for EventStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dolittle.runtime.events.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commit",
			Handler:    _EventStore_Commit_Handler,
		},
		{
			MethodName: "CommitForAggregate",
			Handler:    _EventStore_CommitForAggregate_Handler,
		},
		{
			MethodName: "FetchForAggregate",
			Handler:    _EventStore_FetchForAggregate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchForAggregateInBatches",
			Handler:       _EventStore_FetchForAggregateInBatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Runtime/Events/EventStore.proto",
}
